Task 2.1
To implement the assertions and make sure that a fork can only be used by one philosopher at a time, the array int held[N] is created globally, 
and atomically incremented and asserted every time a fork is picked up held[id]++ and (assert(held[id] == 1)), and when dropped it is decremented
and asserted that held[id]is 0.
Task 2.2
Using a LTL formula, a global ltl function NoSharedForks is created, with the LTL formula [](held[0] <= 1, held[1] <= 1..) etc including each fork, 
with the formula meaning that held[i] must always be 1 or 0, so that no two philosophers may hold the same fork. This solution is global, always checking
while the assertions checked when a fork was picked up or set down, but the functionality appears to be the same.
Task 3.1
After running spin -a, gcc -o and ./pan -a [-N NoSharedForks], no liveness errors are shown to occur so therefore there are no deadlocks
Task 3.2
We are testing that at least one of the philosophers are eating at each moment, thereby the eating array never has all values as 0:s. 
Task 3.3
This would require that you tested every possible permutations of how the philosophers eat (acquire forks), thus to test that no starvation every occurs would 
have to test for an infinite amount of time. SPIN itself do not support testing for strong fairness, just weak fairness. 
Task 4.1
We are fairly confident that the solution is correct, our LTL formulas verify that deadlocks will
not occur and that philosophers eventually get to eat. Unit tests would increase our confidence
slighty, but the biggest risk is the inherent randomness of which philosopher gets to eat first, but the
atomic operations ensure that there won't be a case with each philosopher holding only one fork 
and waiting for the next. I don't think we would want to bet a large amount of money, due to the inherent 
weak fairness of spin.
Task 4.2 
One risk would be weak fairness, since we can't guarantee with the LTL formula that something
will happen, but it does guarantee what will not happen (One fork being held by two philosophers for example).
Another risk would be that the LTL requirements do not account for every problematic state
and Spin only verifies the given LTL formulas, which might make us believe that the requirements
are met while they in fact are not.


